<?xml version="1.0" encoding="UTF-8"?>
<!--
此文件为说明文件，可以执行测试类进行测试
数据库表结构及数据内容说明

表：ZZStudent  学生基础信息表
Sno Sname Sex Sage Sdept
***************************
1   张三  男    18 北京大学
2   李四  女    18 清华大学

表：ZZCourse  学生课程分数表
Cno Cname Credit Semester
***************************
1   语文     100        1
2   数学     100        1
3   语文      90        2
4   数学      88        2

每一个属性在此类中均可以找到说明，请确保此文件保持最新，任何变更需确保此文件可以正常测试通过
v1.0  -createData 2020-05-26

变更日志：
v1.0 2020-05-29 增加Excel插件 ，用来采用指定单元格-值的形式进行赋值
v1.1 2020-09-18 重新重构代码，支持级联保存，多表同时保存，支持重写OnSave方法



-->
<excelConfig>
	<parameters>
		<!--temlateSyntax  代表是否使用特殊语法来做模板，如果使用特殊模板语法，请参考语法手册。如果值为TRUE 则View中配置的TOP LEFT 不起作用，排版的方式完全依赖模板中的内容-->
		<parameter name="temlateSyntax" value="false"/>
		<!-- template_FilePath:模板文件的路径，只能配置在当前配置文件同级目录或者下级目录-->
		<parameter name="template_FilePath" value="d:\\aaa.xlsx"/>
		<!-- outputFilePath：文件输出的路径，不允许为空-->
		<parameter name="outputFilePath" value=""/>



		<!--
        parameter中的属性具体含义
        htmlType[input/select]//类型选择项:下拉框/文本输入框/单选框/日期选择
        isRequired;//是否是必填项 默认为非必填:
        			0:必填
        			1:非必填
		isShow;   //是否在webexcel中显示对应的参数 默认为不显示:
        			0:显示
        			1:不显示
        desc //描述,webexcel中筛选框的描述信息
        modelId//对应数据源的id: 从xml中的model中获取对应id的数据源当htmlType为Select/radio下拉框时候提供数据支持
        -->
		<parameter name="StudentID" value="" isShow="0" isRequired="0" desc="请选择您要查询的学生姓名"  htmlType="select" modelId="selectDateSource" />

	</parameters>

	<!--
	此块为Excel的插件类，在使用WebExcel为载体进行表单数据收集时候，在很多场景需要
    设定单元格下拉框或者单元格类型
	-->
	<WebExcleView  JsSource="">
		<Plus  cellRange="A1"       			 CellType="Combo"                            modelid="selectDateSource"          />
		<Plus  cellRange="A2"       			 CellType="DatePicker"                                                           />
		<Plus  cellRange="A3"        			 CellType="CheckBoxList"         			 modelid="selectDateSource"          />
		<Plus  cellRange="A4"                    CellType="GroupList"                        modelid="orgtree"            cls="" />
		<Plus  cellRange="D1:D10,D13,E"          CellType="UnLockCell"                       modelid=""                   cls="" />
		<Plus  cellRange="B,C,E"                 CellType="setColumnVisible"         /><!--设置列隐藏，如果不希望解密，则应该将内容通过字段设置为空值，或者禁止unhide-->
		<Plus  cellRange="4"                     CellType="setRowVisible"            /><!--设置行隐藏，如果不希望解密，则应该将内容通过字段设置为空值，或者禁止unhide-->
		<!--
		 CellType：支持Combo  DatePicker CheckBoxList  GroupList UnLockCell 如果其他格式，定制ComponentPlus.js
		 cellRange 支持混排（单元格范围，某一个单元格，某列）D1:D10,D13,E  D1:D10 代表范围，E不指定数字后缀代表E这一整列，D13代表具体某一个单元格
		 cls 预留配置，暂时未实现
		 modelid（引用数据源，参考models 块元素）
		 如果配置单元格插件类型为GroupList：带有上下级的关系树，配置的数据源必须 含有以下字段 ID() PID()  text()  value () order(排序)
		 如果配置单元格插件类型为GroupList或者Combo普通的数据源 必须含有字段text()  value
		-->
	</WebExcleView>

	<!--
     models 块
     cls属性->值为一个Java类，需要实现com.thinkgem.jeesite.common.excelConfig.exector.WebExcelInterFace 接口的所有方法
     一旦实现后，实现类将接管models处理方法,返回的是数据集

     该类目前有三个主要的方法需要实现-分别
     onGetCellVue   -获取行数据，可以在自定义类中处理行数据
     onGetDataList- -获取记录集数据，可以自己拼装查询组成需要返回的List
     onBeforeSave   -保存数据前调用，用来自定义处理SqlBean

    -->
	<models cls="">
		<!--此块为纯数据Bean，仅为前端提供数据源，没有对应的view-->

		<!--演示提供普通的下拉框数据源-->
		<model  id="selectDateSource">
			<SQLStrs>
				<sqlStr>
					<![CDATA[
					 SELECT Sno value , Sname name , Sname text   FROM  ZZStudent
					]]>
				</sqlStr>
			</SQLStrs>
		</model>
		<!--演示提供树状结构的组织机构下拉框数据源-->
		<model  id="orgtree">
			<SQLStrs>
				<sqlStr>
					<![CDATA[


            SELECT * FROM (

             SELECT
             id, parent_id  pid,   name [text], id value
             FROM  sys_office WHERE id  NOT IN ('6c75128b7ada476da71f89ad690b399f','151ae129eb774bf38af0ff86ccba69ec' ,'fc3aa6dbdc404a83aa1e41a8c0fef2e1','7f148d491cb947c68e5a295e2a2b1851' ,'f43ce15f821e4264b4e5ca586b01b6c8') AND del_flag=0
             UNION
             SELECT no,office_id,   no+'_' +name  [text],  no+'_'+name   value FROM sys_user WHERE  no<>''  AND del_flag=0 AND no NOT IN ('ZZZ')


            ) TView
            ORDER BY [text]


					]]>
				</sqlStr>
			</SQLStrs>
		</model>


		<!--
		带有上下级的关系树，演示一个简单的结构
		含有以下字段 ID() PID()  text()  value () order(排序)
		-->
		<model  id="treedemo">
			<SQLStrs>
				<sqlStr>
					<![CDATA[
					SELECT   'A'    id, ''    pid,  'A'       [text], 'A' value
					UNION ALL
					SELECT   'A1'   id, 'A'   pid,  'A1'    [text], 'A1' value
					UNION ALL
					SELECT   'A1.1' id, 'A1'   pid,  'A1.1'    [text], 'A1.1' value
					UNION ALL
					SELECT   'B' id, ''   pid,  'B'    [text], 'B' value
					UNION ALL
					SELECT   'B1'   id, 'B'   pid,  'B1'    [text], 'B1' value
					UNION ALL
					SELECT   'B1.1' id, 'B1'   pid,  'B1.1'    [text], 'B1.1' value
					]]>
				</sqlStr>
			</SQLStrs>
		</model>


		<!--
         model 块
         id属性-> 必填，且属性值必须对应此文件中view元素块中的modelid的属性值。二个值必须相等，view块中依赖modelid的值找到对应的 model 块.
         在查询场景下：model块中查询到的数据集根据view块中配置的字段为索引，将数值填充到 view块中的property中的value
        -->
		<model  id="ZZStudent_Query">
			<parameters>
				<!--
                 parameter块
                 name
                 class
                 value:@@开头的变量代表系统变量，在运行时，会自动替换为实际的内容，例如@@Userid在系统运行期，会自动替换为当前运行的用户的ID
                       例如：<parameter name="userid" class="java.lang.String" value="@@Userid"/>
                       $F!开头的变量代表运行期的变量，其中{}中包裹的变量为View中的属性的feild名称，在系统运行期，会被property中实际的字段值替换
                       例如 $F!{AAA} ，代表当前model一定对于了一个view，其中view中一定有一个property属性，其中的filed值一定为AAA

                       $P!开头的变量代表运行期的变量,其中{}中包裹的变量为全局的属性的相同属性名称相匹配,会被parameter中的实际value替换
                       <parameter name="assetSerialNo" class="java.lang.String"  value="$P!{assetSerialNo}" /> 会被全局中的parameter中的实际value替换

                 -->
				<parameter name="Sno" class="java.lang.String" value="$P!{StudentID}"/>
			</parameters>
			<SQLStrs>
				<!--
                sqlStr块
                此内容块中，可以配置一条或者多条SQL语句，如果需要使用参数，必须使用$P!前缀且必须用{}进行包裹model块中的 parameter中的name引用
                例如，此句中，因为使用参数用户ID，则使用'$P!{userid}'进行引用， userid在parameter块中进行了配置

                CDATA文本中配置文本默认为SQL文本，支持FreeMarker特性  if/elseif/else  等命令均支持
                更多细节参考http://freemarker.foofun.cn/pgui_datamodel.html
                某些情况下，您希望根据外层传入参数变量进行逻辑控制，就需要这个特性

                -->
				<sqlStr>
					<![CDATA[
						SELECT Sno, Sname, Sex, Sage, Sdept
						FROM ZZStudent
						<#if Sno?? && Sno != ""> WHERE Sno ='$P!{Sno}' </#if>
					 	;
					]]>
					<!--
                        SQL 中采用 freeMaker 语法标记语言，可以直接进行变量替换
                        <#if Sno?? && Sno != ""> WHERE Sno ='$P!{Sno}' </#if>
                        代表含义为Sno变量为NULL或者变量值不是空值的时候，才能在语句中执行下面的内容
                     -->

				</sqlStr>
			</SQLStrs>
		</model>


		<model  id="ZZCourse_Query">
			<parameters>
				<!--
				此处$F!{Sno}是指上级节点配置的字段，
				此处对应的view是ZZCourse_Query，其上级为ZZStudent_Query，所以，其上级view中所有配置的property均可以访问。
				-->
				<parameter name="Sno" class="java.lang.String" value="$F!{Sno}"/>
			</parameters>
			<SQLStrs>
				<sqlStr>
					<![CDATA[
						SELECT * from  ZZCourse
						WHERE Semester ='$P!{Sno}';
					]]>
				</sqlStr>
			</SQLStrs>
		</model>



		<model  id="virtual_Query">
			<parameters>
				<!--
			      此处配置一个虚拟的模型，只为了演示自己组装数据源
				-->
				<parameter name="Cno" class="java.lang.String" value="$F!{Cno}"/>
			</parameters>

		</model>

		<!--
         model 块
         id属性-> 必填，且属性值必须对应此文件中view元素块中的modelid的属性值。二个值必须相等，view块中依赖modelid的值找到对应的 model 块.
         在查询场景下：model块中查询到的数据集根据view块中配置的字段为索引，将数值填充到 view块中的property中的value
        -->
		<model  id="ZZStudent_Save">
			<parameters>
				<!--
                 parameter块
                 name
                 class
                 value:@@开头的变量代表系统变量，在运行时，会自动替换为实际的内容，例如@@Userid在系统运行期，会自动替换为当前运行的用户的ID
                       例如：<parameter name="userid" class="java.lang.String" value="@@Userid"/>
                       $F!开头的变量代表运行期的变量，其中{}中包裹的变量为View中的属性的feild名称，在系统运行期，会被property中实际的字段值替换
                       例如 $F!{AAA} ，代表当前model一定对于了一个view，其中view中一定有一个property属性，其中的filed值一定为AAA

                       $P!开头的变量代表运行期的变量,其中{}中包裹的变量为全局的属性的相同属性名称相匹配,会被parameter中的实际value替换
                       <parameter name="assetSerialNo" class="java.lang.String"  value="$P!{assetSerialNo}" /> 会被全局中的parameter中的实际value替换

                 -->
				<parameter name="Sno" class="java.lang.String"        value="$F!{Sno}"/>
				<parameter name="Sname" class="java.lang.String"      value="$F!{Sname}"/>
				<parameter name="Sex" class="java.lang.String"        value="$F!{Sex}"/>
				<parameter name="Sage" class="java.lang.String"       value="$F!{Sage}"/>
				<parameter name="Sdept" class="java.lang.String"      value="$F!{Sdept}"/>

			</parameters>
			<SQLStrs>
				<!--
                sqlStr块
                此内容块中，可以配置一条或者多条SQL语句，如果需要使用参数，必须使用$P!前缀且必须用{}进行包裹model块中的 parameter中的name引用
                例如，此句中，因为使用参数用户ID，则使用'$P!{userid}'进行引用， userid在parameter块中进行了配置

                CDATA文本中配置文本默认为SQL文本，支持FreeMarker特性  if/elseif/else  等命令均支持
                更多细节参考http://freemarker.foofun.cn/pgui_datamodel.html
                某些情况下，您希望根据外层传入参数变量进行逻辑控制，就需要这个特性

                -->
				<sqlStr>
					<![CDATA[

                    IF EXISTS (SELECT * FROM ZZStudent WHERE  Sno = '$P!{Sno}' )

                    BEGIN
                    	DELETE FROM ZZStudent WHERE Sno = '$P!{Sno}';
                    	INSERT INTO ZZStudent (Sno, Sname, Sex, Sage, Sdept) VALUES ('$P!{Sno}', '$P!{Sname}', '$P!{Sex}', $P!{Sage}, '$P!{Sdept}');
                    END

                    ELSE

                    BEGIN
                    	INSERT INTO ZZStudent (Sno, Sname, Sex, Sage, Sdept) VALUES ('$P!{Sno}', '$P!{Sname}', '$P!{Sex}', $P!{Sage}, '$P!{Sdept}');

                    END
					]]>
					<!--
                        SQL 中采用 freeMaker 语法标记语言，可以直接进行变量替换
                        <#if Sno?? && Sno != ""> WHERE Sno ='$P!{Sno}' </#if>
                        代表含义为Sno变量为NULL或者变量值不是空值的时候，才能在语句中执行下面的内容
                     -->

				</sqlStr>
			</SQLStrs>
		</model>


		<model  id="ZZCourse_Save">
			<parameters>


				<parameter name="Sno" class="java.lang.String"            value="$P!{Sno}"/>
				<parameter name="Cno" class="java.lang.String"            value="$F!{Cno}"/>
				<parameter name="Cname" class="java.lang.String"          value="$F!{Cname}"/>
				<parameter name="Credit" class="java.lang.String"         value="$F!{Credit}"/>
				<parameter name="Sage" class="java.lang.String"           value="$F!{Sage}"/>
				<parameter name="Semester" class="java.lang.String"       value="$F!{Semester}"/>

			</parameters>
			<SQLStrs>

				<sqlStr>
					<![CDATA[



				     IF EXISTS (SELECT * FROM ZZCourse WHERE  Semester = '$P!{Sno}')
                    BEGIN
                    	DELETE FROM  ZZCourse WHERE Semester = '$P!{Sno}';
                    	INSERT INTO ZZCourse (Cno, Cname, Credit, Semester) VALUES ('$P!{Cno}', '$P!{Cname}', '$P!{Credit}', $P!{Semester});
                    END
                    ELSE
                    BEGIN
                       	INSERT INTO ZZCourse (Cno, Cname, Credit, Semester) VALUES ('$P!{Cno}', '$P!{Cname}', '$P!{Credit}', $P!{Semester});
                    END
					]]>
					<!--
                        SQL 中采用 freeMaker 语法标记语言，可以直接进行变量替换
                        <#if Sno?? && Sno != ""> WHERE Sno ='$P!{Sno}' </#if>
                        代表含义为Sno变量为NULL或者变量值不是空值的时候，才能在语句中执行下面的内容
                     -->

				</sqlStr>
			</SQLStrs>
		</model>


		<model  id="virtual_Save">
			<SQLStrs>
				<sqlStr>
					<![CDATA[
				      ----虚拟字段 虚拟字段
				      DELETE FROM ZZCourse  WHERE 1=2
					]]>
				</sqlStr>
			</SQLStrs>
		</model>



	</models>

	<!--
     views块
     action属性[query,save]
     query:代表从model中获取数据集，然后根据view中配置的 sheet名称，从CELL[Top,left]坐标开始，将数据输出到Excel文件中
     save：代表从Excel原始文件中获取数据，根据view中配置的 sheet名称，从CELL[Top,left]坐标开始获取数据，
          将数据按照VIEW中的配置的字段类型，存储到property对象中，然后传递到model中。
     -->
	<views   action="query">
		<!--
               view块
               view块可以由上下级关系，或者不同的view块可以毫无联系都是允许的，上下级关系依赖ref属性
               modelid：所有的view中的modelid值不允许重复，必须保持唯一
               sheetName:输出到Excel中的sheetName名称，可以不配置，如果不配置，默认为Excel文件中的第一个sheet
               top:指定从第上面数第几行开始
               left:指定从左边数第几列开始
               ref:指定父级view，参数为父级view的modelid 。默认可以为空或者不设置ref元素。
               /**
               view可以指定主-子报表的形式，例如：学生和分数的关系就是一个典型的主-子结构
               每一个学生都对应若干学科的分数
               **/
        -->
		<view modelid="ZZStudent_Query" sheetName="sheet1"   top="1" left="1">
			<propertys>
				<!--
                property块
                cellIndex：相对位置坐标，相对于其所在view块中配置的top和left的对应坐标的偏移
                           例如：配置0,1代表是其依赖单元格偏移0行1列
                                配置1,1代表其依赖单元格偏移1行1列
                           后面的property依赖前面的property配置，第一行的property配置依赖其父节点view中的top和left的配置
                feild：和model中的数据集的映射关系
                type：数据的类型

                 required [0,1,-1]
                           0代表为必须为空，1代表必须不能为空，-1代表不检查 此属性非常重要，通常用作读取Excel时候的退出或者终止的条件

                -->
				<property 	cellIndex="0,1" feild="Sno" 	type="java.lang.String"  />
				<property 	cellIndex="0,1" feild="Sname"   type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Sex" 	type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Sage" 	type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Sdept" 	type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Sno" 	type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="VFeild" 	type="java.lang.String" />


				/>
			</propertys>
		</view>

		<!--
		此处演示，具有具有上级节点的view端 请注意属性  ref ，指向上级view的 modelid
	    具有主子参数的表，一定会产生参数传递。
	    ☆：所有的下级的view，均可以在其对应的model中，访问其上级view中所有的属性字段的值。
		-->
		<view modelid="ZZCourse_Query" sheetName="sheet1"   top="1" left="3" ref="ZZStudent_Query">
			<propertys>
				<property 	cellIndex="0,1" feild="Cno" 	    type="java.lang.String"  />
				<property 	cellIndex="0,1" feild="Cname"       type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Credit" 	    type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Semester" 	type="java.lang.String" />
			</propertys>
		</view>



		<view modelid="virtual_Query" sheetName="sheet1"   top="1" left="5" ref="ZZCourse_Query">
			<propertys>
				<property 	cellIndex="0,1"	feild="DESC" 	    type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="NAME" 	type="java.lang.String" />
			</propertys>
		</view>



	</views>



	<views   action="save">
		<!--
               view块
               view块可以由上下级关系，或者不同的view块可以毫无联系都是允许的，上下级关系依赖ref属性
               modelid：所有的view中的modelid值不允许重复，必须保持唯一
               sheetName:输出到Excel中的sheetName名称，可以不配置，如果不配置，默认为Excel文件中的第一个sheet
               top:指定从第上面数第几行开始
               left:指定从左边数第几列开始
               ref:指定父级view，参数为父级view的modelid 。默认可以为空或者不设置ref元素。
               /**
               view可以指定主-子报表的形式，例如：学生和分数的关系就是一个典型的主-子结构
               每一个学生都对应若干学科的分数
               **/
        -->
		<view modelid="ZZStudent_Save" sheetName="sheet1"   top="1" left="1">
			<propertys>
				<!--
                property块
                cellIndex：相对位置坐标，相对于其所在view块中配置的top和left的对应坐标的偏移
                           例如：配置0,1代表是其依赖单元格偏移0行1列
                                配置1,1代表其依赖单元格偏移1行1列
                           后面的property依赖前面的property配置，第一行的property配置依赖其父节点view中的top和left的配置
                feild：和model中的数据集的映射关系
                type：数据的类型

                 required [0,1,-1]
                           0代表为必须为空，1代表必须不能为空，-1代表不检查 此属性非常重要，通常用作读取Excel时候的退出或者终止的条件

                -->
				<property 	cellIndex="0,1" feild="Sno" 	type="java.lang.String" required="1" />
				<property 	cellIndex="0,1" feild="Sname"   type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Sex" 	type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Sage" 	type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Sdept" 	type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Sno" 	type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="VFeild" 	type="java.lang.String" />


				/>
			</propertys>
		</view>



		<!--
		此处演示，具有具有上级节点的view端 请注意属性  ref ，指向上级view的 modelid
	    具有主子参数的表，一定会产生参数传递。
	    ☆：所有的下级的view，均可以在其对应的model中，访问其上级view中所有的属性字段的值。
		-->
		<view modelid="ZZCourse_Save" sheetName="sheet1"   top="1" left="2" ref="ZZStudent_Save">
			<propertys>
				<property 	cellIndex="0,1" feild="这个是个虚拟标志位" 	    type="java.lang.String"   required="0" />
				<property 	cellIndex="0,1" feild="Cno" 	    type="java.lang.String"               required="1" />
				<property 	cellIndex="0,1" feild="Cname"       type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Credit" 	    type="java.lang.String" />
				<property 	cellIndex="0,1"	feild="Semester" 	type="java.lang.String" />
			</propertys>
		</view>

		<view modelid="virtual_Save" sheetName="sheet1"   top="1" left="5" ref="ZZCourse_Save">
			<propertys>
				<property 	cellIndex="0,0"	feild="EXIT" 	     type="java.lang.String"  required="0" />
				<property 	cellIndex="0,1"	feild="DESC" 	     type="java.lang.String"  required="1" />
				<property 	cellIndex="0,1"	feild="NAME" 	     type="java.lang.String" />
			</propertys>
		</view>



	</views>

</excelConfig>
